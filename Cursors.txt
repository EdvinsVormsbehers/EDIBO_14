#MySQL: Declare a Cursor
This MySQL tutorial explains how to declare a cursor in MySQL with syntax and examples.

Description
A cursor is a SELECT statement that is defined within the declaration section of your stored program in MySQL.

Syntax
The syntax to declare a cursor in MySQL is:

DECLARE cursor_name CURSOR FOR
  select_statement;
Parameters or Arguments
cursor_name
The name to assign to the cursor.
select_statement
The SELECT statement associated with the cursor.
Example
Let's look at how to declare a cursor in MySQL.

For example:

DECLARE c1 CURSOR FOR
  SELECT site_id
  FROM sites
  WHERE site_name = name_in;
The result set of this cursor is all site_id values where the site_name matches the name_in variable.

Below is a function that uses this cursor.

DELIMITER //

CREATE FUNCTION FindSiteID ( name_in VARCHAR(50) )
RETURNS INT

BEGIN

   DECLARE done INT DEFAULT FALSE;
   DECLARE siteID INT DEFAULT 0;

   DECLARE c1 CURSOR FOR
     SELECT site_id
     FROM sites
     WHERE site_name = name_in;

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

   OPEN c1;
   FETCH c1 INTO siteID;

   CLOSE c1;

   RETURN siteID;

END; //

DELIMITER ;
You could then call your new function (that contains the cursor) as follows:

SELECT FindSiteID ('TechOnTheNet.com');


#MySQL: Set up a Handler for Cursor's NOT FOUND condition
This MySQL tutorial explains how to set up a handler for the NOT FOUND condition for a cursor in MySQL with syntax and examples.

Description
If you try to fetch data from a cursor and there are no rows, MySQL will raise a NO DATA error. You can set up a handler for the NOT FOUND condition so that your stored program does not terminate with an error.

Syntax
The syntax to set up a handler for the NOT FOUND condition for a cursor in MySQL is:

DECLARE CONTINUE HANDLER FOR NOT FOUND [ set_condition ];
Parameters or Arguments
set_condition
The condition to set when the NOT FOUND condition is encountered by the cursor.
Example
Let's look at how to set up a handler for the NOT FOUND condition for a cursor in MySQL.

First, we need to declare a variable that will be set when the NO DATA error occurs.

DECLARE done INT DEFAULT FALSE;
Next, we need to declare the cursor.

DECLARE c1 CURSOR FOR
  SELECT site_id
  FROM sites
  WHERE site_name = name_in;
Finally, we need to declare a handler for the NOT FOUND condition for the cursor.

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
Below is a function that demonstrates how to put all of these components together to set up a handler for the NOT FOUND condition for a cursor in MySQL so that your stored program will not terminate with an error.

DELIMITER //

CREATE FUNCTION FindSiteID ( name_in VARCHAR(50) )
RETURNS INT

BEGIN

   DECLARE done INT DEFAULT FALSE;
   DECLARE siteID INT DEFAULT 0;

   DECLARE c1 CURSOR FOR
     SELECT site_id
     FROM sites
     WHERE site_name = name_in;

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

   OPEN c1;
   FETCH c1 INTO siteID;

   CLOSE c1;

   RETURN siteID;

END; //

DELIMITER ;


#MySQL: OPEN Statement
This MySQL tutorial explains how to use the OPEN statement to open a cursor in MySQL with syntax and examples.

Description
Once you've declared your cursor in MySQL, the next step is to use the OPEN statement to open the cursor.

Syntax
The syntax to open a cursor using the OPEN statement in MySQL is:

OPEN cursor_name;
Parameters or Arguments
cursor_name
The name of the cursor that you wish to open.
Example
For example, you could open a cursor called c1 in MySQL with the following command:

OPEN c1;
Below is a function that demonstrates how to open a cursor.

DELIMITER //

CREATE FUNCTION FindSiteID ( name_in VARCHAR(50) )
RETURNS INT

BEGIN

   DECLARE done INT DEFAULT FALSE;
   DECLARE siteID INT DEFAULT 0;

   DECLARE c1 CURSOR FOR
     SELECT site_id
     FROM sites
     WHERE site_name = name_in;

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

   OPEN c1;
   FETCH c1 INTO siteID;

   CLOSE c1;

   RETURN siteID;

END; //

DELIMITER ;


#MySQL: CLOSE Statement
This MySQL tutorial explains how to use the CLOSE statement to close a cursor in MySQL with syntax and examples.

Description
The final step in MySQL is to close the cursor once you have finished using it.

Syntax
The syntax to close a cursor in MySQL is:

CLOSE cursor_name;
Parameters or Arguments
cursor_name
The name of the cursor that you wish to close.
Example
For example, you could close a cursor called c1 in MySQL with the following command:

CLOSE c1;
Below is a function that demonstrates how to use the CLOSE statement:

DELIMITER //

CREATE FUNCTION FindSiteID ( name_in VARCHAR(50) )
RETURNS INT

BEGIN

   DECLARE done INT DEFAULT FALSE;
   DECLARE siteID INT DEFAULT 0;

   DECLARE c1 CURSOR FOR
     SELECT site_id
     FROM sites
     WHERE site_name = name_in;

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

   OPEN c1;
   FETCH c1 INTO siteID;

   CLOSE c1;

   RETURN siteID;

END; //

DELIMITER ;


#MySQL: FETCH Statement
This MySQL tutorial explains how to use the FETCH statement to fetch the next row for a cursor in MySQL with syntax and examples.

Description
The purpose of using a cursor, in most cases, is to retrieve the rows from your cursor so that some type of operation can be performed on the data. After declaring and opening your cursor, the next step is to use the FETCH statement to fetch rows from your cursor.

Syntax
The syntax for the FETCH statement in MySQL is:

FETCH [ NEXT [ FROM ] ] cursor_name INTO variable_list;
Parameters or Arguments
cursor_name
The name of the cursor that you wish to fetch rows.
variable_list
The list of variables, comma separated, that you wish to store the cursor result set in.
Example
Let's look at how to fetch the next row for a cursor using the FETCH statement in MySQL.

For example, you could have a cursor defined in MySQL as follows:

DECLARE c1 CURSOR FOR
  SELECT site_id
  FROM sites
  WHERE site_name = name_in;
The command that would be used to fetch the data from this cursor is:

FETCH c1 INTO siteID;
This would fetch the first site_id value into the variable called site_ID.

Below is a function that demonstrates how to use the FETCH statement.

DELIMITER //

CREATE FUNCTION FindSiteID ( name_in VARCHAR(50) )
RETURNS INT

BEGIN

   DECLARE done INT DEFAULT FALSE;
   DECLARE siteID INT DEFAULT 0;

   DECLARE c1 CURSOR FOR
     SELECT site_id
     FROM sites
     WHERE site_name = name_in;

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

   OPEN c1;
   FETCH c1 INTO siteID;

   CLOSE c1;

   RETURN siteID;

END; //

DELIMITER ;
